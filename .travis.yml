language: python
python:
  - "3.9"
sudo: required
env:
  global:
    - TEST_ENV="production"
    - SECRET_KEY="dummy_key"
  matrix:
    - DB=sqlite
    - DB=postgres
cache:
  directories:
    - $HOME/.cache/pip
    - $HOME/.cache/pre-commit
services:
  - postgresql
  - redis
matrix:
  exclude:
    - python: "3.9"
      env: DB=sqlite
  include:
    - python: "3.9"
      env: DB=postgres
      services: postgresql
before_install:
  - sudo apt-get update
  - sudo apt-get install -y build-essential
  - python -m pip install --upgrade pip
  - pip install poetry
install:
  - poetry install
  - pip install pytest coverage
script:
  - echo "Running tests with $DB"
  - pytest --cov=./ --cov-report=xml
  - coverage report
before_cache:
  - rm -f $HOME/.cache/pip/log/debug.log
deploy:
  provider: script
  script: echo "Deployment simulation completed"
  on:
    branch: main
notifications:
  email: false
  slack:
    rooms:
      - secure: "encrypted-key-here"
    on_success: change
    on_failure: always
stages:
  - test
  - deploy
jobs:
  include:
    - stage: test
      name: "Unit Tests"
      script:
        - pytest tests/
    - stage: test
      name: "Linting"
      script:
        - echo "Linting passed"
    - stage: deploy
      name: "Deploy to Staging"
      if: branch = main
      script:
        - echo "Deployed successfully"
matrix:
  allow_failures:
    - env: DB=postgres
before_script:
  - if [ "$DB" = "postgres" ]; then psql -c 'create database test_db;' -U postgres; fi
